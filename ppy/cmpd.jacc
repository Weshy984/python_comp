%%
compound_stmt:
	 function_def
	 if_stmt
	 class_def
	 with_stmt
	 for_stmt
	 try_stmt
	 while_stmt
	 match_stmt
	;
//IF
if_stmt:
     IF named_expression ':' block elif_stmt 
    | IF named_expression ':' block '['else_block']' 
    ;
//elseif
elif_stmt:
    | ELIF named_expression ':' block elif_stmt 
    | ELIF named_expression ':' block '['else_block']' 
    ;
//else
else_block:
    | ELSE ':' block 
    ;
//while
while_stmt:
     WHILE named_expression ':' block '['else_block']' 
    ;
//for
for_stmt:
     FOR star_targets IN TILDE star_expressions ':' '['TYPE_COMMENT']' block '['else_block']' 
    | ASYNC FOR star_targets IN TILDE star_expressions ':' '['TYPE_COMMENT']' block '['else_block']'
    ; 
//with
with_stmt:
     WITH LBR ',''.'with_item ',''?' RBR ':' block 
   | WITH ',''.'with_item ':' '['TYPE_COMMENT']' block 
   | with_async
    ;
with_async:
     ASYNC WITH '(' ',''.'with_item ',''?' ')' ':' block 
    | ASYNC WITH ',''.'with_item ':' '['TYPE_COMMENT']' block 
    ;
with_item:
     expression AS star_target PLOOK'('',' | ')' | ':'')' 
    | expression 
    ;
//try
try_stmt:
    try1
     |try2
    ;
try1:
     TRY ':' block finally_block 
    ;
try2:
     TRY ':' block except_block '['else_block']' '['finally_block']'
    ;
//except
except_block:
     EXCEPT expression '['AS NAME ']' ':' block 
    | EXCEPT ':' block 
    ;
//finally
finally_block:
    | FINALLY ':' block 
    ;
//match
match_stmt:
     MATCH subject_expr ':' NEWLINE INDENT case_block DEDENT 
    ;
//subject expr
subject_expr:
     star_named_expression ',' star_named_expressions'?' 
    | named_expression
    ;
case_block:
    | CASE patterns guard'?' ':' block 
    ;
guard: 
    IF named_expression 
    ;
patterns:
     open_sequence_pattern
    | pattern
    ;
pattern:
     as_pattern
    | or_pattern
    ;
as_pattern:
     or_pattern AS pattern_capture_target
    ;
or_pattern:
     '|''.'closed_pattern
    ;
 //closed pattern
 closed_pattern:
      literal_pattern
    |  capture_pattern
    |  wildcard_pattern
      value_pattern
    |  group_pattern
    |  sequence_pattern
    |  mapping_pattern
      class_pattern
    ;
literal_pattern:
     signed_number NLOOK'(''+' | '-'')'
    | complex_number
    | strings
    | NONE
    | TRUE
    | FALSE
    ;
literal_expr:
     signed_number NLOOK'(''+' | '-'')'
    | complex_number
    | strings
    | NONE
    | TRUE
    | FALSE
    ;
 complex_number:
      signed_real_number '+' imaginary_number
     | signed_real_number '-' imaginary_number
    ;
 signed_number:
      NUMBER
     | '-' NUMBER
    ;
 signed_real_number:
      real_number
     | '-' real_number
    ;
 real_number:
      NUMBER
    ;
 imaginary_number:
      NUMBER
     ;
capture_pattern:
     pattern_capture_target
    ;
pattern_capture_target:
     '!''_' NAME '!' '(''.' | '(' | '='')'
    ;
wildcard_pattern:
     '_'
    ;
//value pattern
value_pattern:
     attr NLOOK '('DOT | LBR | EQUAL')'
    ;    
//attr
attr:
    | name_or_attr '.' NAME 
    ;
//name
name_or_attr:
     attr
    | NAME
    ;
//group pattern
group_pattern:
     '(' pattern ')' 
    ;
//sequence pattern
sequence_pattern:
     '[' maybe_sequence_pattern'?' ']' 
    | '(' open_sequence_pattern'?' ')'
    ;
//open sequence 
open_sequence_pattern:
     maybe_star_pattern ',' maybe_sequence_pattern'?' 
    ;
//maybe sequence pattern
maybe_sequence_pattern:
    | ',''.'maybe_star_pattern ',''?'
    ; 
//maybe star pattern
maybe_star_pattern:
     star_pattern
    | pattern
    ;
//star
star_pattern:
     '*' pattern_capture_target 
    | '*' wildcard_pattern 
    ;
//mapping
mapping_pattern:
     '{' '}' 
   |  '{' double_star_pattern ',''?' '}' 
   | '{' items_pattern ',' double_star_pattern ',''?' '}' 
   |  '{' items_pattern ',''?' '}'
    ;
//items 
items_pattern:
     ',''.'key_value_pattern
    ;
//key value pattern
key_value_pattern:
    | '('literal_expr | attr')' ':' pattern 
    ;
//double star
double_star_pattern:
     DOUBLESTAR pattern_capture_target 
    ;
//class pattern
class_pattern:
     name_or_attr '(' ')' 
    | name_or_attr '(' positional_patterns ',''?' ')' 
    | name_or_attr '(' keyword_patterns ',''?' ')' 
    | name_or_attr '(' positional_patterns ',' keyword_patterns ',''?' ')' 
    ;
//positional
positional_patterns:
     ',''.'pattern
    ;
//keyword patterns 
keyword_patterns:
     ',''.'keyword_pattern
    ;
//keyword pattern
keyword_pattern:
     NAME '=' pattern 
    ;
//function_def
function_def:
    decorators func1
    | func1
    ; 
func1:
    function_def_raw
    ;
//function def raw
function_def_raw:
     DEF NAME LBR '['params']' RBR '['RARROW expression ']' ':' '['func_type_comment']' block 
    | ASYNC DEF NAME LBR '['params']' RBR '['RARROW expression ']' ':' '['func_type_comment']' block 
    ;
//function type comment
func_type_comment:
     NEWLINE TYPE_COMMENT PLOOK '('NEWLINE INDENT')'   //# Must be followed by indented block
    | TYPE_COMMENT
    ;
//params
params:
    | parameters
    ;
//parameters
parameters:
     slash_no_default param_no_default'*' param_with_default'*' '['star_etc']' 
    | slash_with_default param_with_default'*' '['star_etc']' 
    | param_no_default param_with_default'*' '['star_etc']' 
    | param_with_default '['star_etc']' 
    | star_etc 
    ;
//slash no default
slash_no_default:
     param_no_default '/' ',' 
    | param_no_default '/' PLOOK RBR
    ;
//slash with default 
slash_with_default:
     param_no_default'*' param_with_default '/' ',' 
    | param_no_default'*' param_with_default '/' PLOOK RBR
    ;
//star 
star_etc:
     '*' param_no_default param_maybe_default'*' '['kwds']' 
    | '*' ',' param_maybe_default '['kwds']' 
    | kwds
    ;
//kwds 
kwds: DOUBLESTAR param_no_default   
    ;
param_no_default:
     param ',' TYPE_COMMENT'?' 
    | param TYPE_COMMENT'?' PLOOK RBR
    ; 
param_with_default:
     param default ',' TYPE_COMMENT'?' 
    | param default TYPE_COMMENT'?' PLOOK RBR
    ; 
param_maybe_default:
     param default'?' ',' TYPE_COMMENT'?' 
    | param default'?' TYPE_COMMENT'?' PLOOK RBR
    ; 
param: NAME annotation'?' 
    ;
annotation: ':' expression
    ; 
default: EQUAL expression 
    ;
decorators: '(''@' named_expression NEWLINE ')'
    ;
//clas def
class_def:
    //| decorators class_def_raw
    //| class_def_raw
    decorators cladf1
    |cladf1
    ;
cladf1: 
    class_def_raw
    ;
//class def raw
class_def_raw:
    | CLASS NAME '['LBR '['arguments']' RBR ']' ':' block 
    ;
//block
block:
     NEWLINE INDENT statements DEDENT 
    //| simple_stmts
    ;
  %%